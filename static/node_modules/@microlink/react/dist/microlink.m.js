import React, { Fragment, useState, useRef, createElement, useEffect } from 'react';
import styled, { css, keyframes } from 'styled-components';
import NanoClamp from 'nanoclamp';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

var REACT_ELEMENT_TYPE;

function _jsx(type, props, key, children) {
  if (!REACT_ELEMENT_TYPE) {
    REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7;
  }

  var defaultProps = type && type.defaultProps;
  var childrenLength = arguments.length - 3;

  if (!props && childrenLength !== 0) {
    props = {
      children: void 0
    };
  }

  if (props && defaultProps) {
    for (var propName in defaultProps) {
      if (props[propName] === void 0) {
        props[propName] = defaultProps[propName];
      }
    }
  } else if (!props) {
    props = defaultProps || {};
  }

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = new Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 3];
    }

    props.children = childArray;
  }

  return {
    $$typeof: REACT_ELEMENT_TYPE,
    type: type,
    key: key === undefined ? null : '' + key,
    ref: null,
    props: props,
    _owner: null
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  &&& {\n    text-align: inherit;\n    font-weight: inherit;\n    font-family: inherit;\n    color: inherit;\n    margin: 0;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var Clamp = function Clamp(_ref) {
  var children = _ref.children,
      className = _ref.className,
      lines = _ref.lines;
  return _jsx(NanoClamp, {
    className: className,
    lines: lines,
    text: children,
    is: "p"
  });
};

var CardText = styled(Clamp)(_templateObject());

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    @media (min-width: 48em) {\n      ", ";\n    }\n  "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$1() {
  var data = _taggedTemplateLiteral(["\n    @media (max-width: 48em) {\n      ", ";\n    }\n  "]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}

var REGEX_HTTPS = /^https/;
var REGEX_LOCALHOST = /http:\/\/localhost/;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function';
};

var isObject = function isObject(obj) {
  return _typeof(obj) === 'object';
};

var isNil = function isNil(value) {
  return value == null;
};

var getUrlPath = function getUrlPath(data) {
  return data && isObject(data) ? data.url : data;
};

var someProp = function someProp(data, props) {
  return data[props.find(function (prop) {
    return data[prop] !== null && data[prop] !== undefined;
  })];
};

var media = {
  mobile: function mobile() {
    return css(_templateObject$1(), css.apply(void 0, arguments));
  },
  desktop: function desktop() {
    return css(_templateObject2(), css.apply(void 0, arguments));
  }
};

var apiValue = function apiValue(key, value) {
  return value === true ? "".concat(key) : "".concat(key, "=").concat(value);
};

var defaultApiParameters = {
  video: false,
  contrast: false,
  screenshot: false,
  prerender: 'auto'
};

var createApiUrl = function createApiUrl(props) {
  var apiKey = props.apiKey,
      targetUrl = props.url,
      prerender = props.prerender,
      contrast = props.contrast,
      media = props.media;
  var takeScreenshot = media.includes('screenshot');
  var hasVideo = media.includes('video');
  var alias = apiKey ? 'pro' : 'api';
  var url = "https://".concat(alias, ".microlink.io/?url=").concat(encodeURIComponent(targetUrl));

  if (hasVideo) {
    url = "".concat(url, "&").concat(apiValue('video', hasVideo));
  }

  if (!isNil(contrast) && contrast !== defaultApiParameters.contrast) {
    url = "".concat(url, "&").concat(apiValue('palette', contrast));
  }

  if (!isNil(prerender) && prerender !== defaultApiParameters.prerender) {
    url = "".concat(url, "&").concat(apiValue('prerender', prerender));
  }

  if (takeScreenshot) {
    url = "".concat(url, "&").concat(apiValue('screenshot', takeScreenshot));
  }

  return url;
};

var fetchFromApiUrl = function fetchFromApiUrl(apiUrl, _ref) {
  var apiKey = _ref.apiKey;
  var headers = apiKey ? {
    'x-api-key': apiKey
  } : {};
  return fetch(apiUrl, {
    headers: headers
  }).then(function (res) {
    return res.json();
  });
};

var isLarge = function isLarge(cardSize) {
  return cardSize === 'large';
};

var imageProxy = function imageProxy(url) {
  if (!url || REGEX_LOCALHOST.test(url) || REGEX_HTTPS.test(url)) return url;
  return "https://images.weserv.nl/?url=".concat(encodeURIComponent(url).replace('http://', ''));
};

function _templateObject7() {
  var data = _taggedTemplateLiteral(["\n  text-align: left;\n  font-size: 12px;\n  margin: 0;\n  flex-grow: 0;\n"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["\n  text-align: left;\n  font-size: 14px;\n  flex-grow: 2;\n  margin: auto 0;\n  line-height: 18px;\n  ", ";\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n  text-align: left;\n  font-size: 16px;\n  font-weight: bold;\n  margin: 0;\n  flex-grow: 1.2;\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n  flex: 1;\n  padding: 10px 15px;\n  min-width: 0;\n  box-sizing: border-box;\n  ", ";\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n    > p {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n  "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$1() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n"]);

  _templateObject2$1 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$2() {
  var data = _taggedTemplateLiteral(["\n  flex: 0 0 125px;\n"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}

var REGEX_STRIP_WWW = /^www\./;

var getHostname = function getHostname(href) {
  var _ref = new URL(href),
      hostname = _ref.hostname;

  return hostname.replace(REGEX_STRIP_WWW, '');
};

var isLarge$1 = function isLarge(cardSize) {
  return cardSize === 'large';
};

var largeContentStyle = css(_templateObject$2());
var mobileDescriptionStyle = css(_templateObject2$1(), media.mobile(_templateObject3()));
var Content = styled('div')(_templateObject4(), function (_ref2) {
  var cardSize = _ref2.cardSize;
  return isLarge$1(cardSize) && largeContentStyle;
});
var Header = styled('header')(_templateObject5());
var Description = styled('div')(_templateObject6(), function (_ref3) {
  var cardSize = _ref3.cardSize;
  return !isLarge$1(cardSize) && mobileDescriptionStyle;
});
var Footer = styled('footer')(_templateObject7());

var CardContent = function CardContent(_ref4) {
  var title = _ref4.title,
      description = _ref4.description,
      url = _ref4.url,
      cardSize = _ref4.cardSize,
      className = _ref4.className;
  return _jsx(Content, {
    className: className,
    cardSize: cardSize
  }, void 0, _jsx(Header, {
    className: "microlink_card__content_title"
  }, void 0, _jsx(CardText, {
    lines: 1
  }, void 0, title)), _jsx(Description, {
    className: "microlink_card__content_description",
    cardSize: cardSize
  }, void 0, _jsx(CardText, {
    lines: 2
  }, void 0, description)), _jsx(Footer, {
    className: "microlink_card__content_url"
  }, void 0, _jsx(CardText, {
    lines: 1
  }, void 0, url && getHostname(url))));
};

function _templateObject4$1() {
  var data = _taggedTemplateLiteral(["\n  animation: ", " 1.25s linear infinite;\n"]);

  _templateObject4$1 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$1() {
  var data = _taggedTemplateLiteral(["\n  animation: ", " .75s linear infinite;\n"]);

  _templateObject3$1 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$2() {
  var data = _taggedTemplateLiteral(["\n  0% {\n    background: #e1e8ed;\n  }\n  70% {\n    background: #dce3e8;\n  }\n  100% {\n    background: #e1e8ed;\n  }\n"]);

  _templateObject2$2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$3() {
  var data = _taggedTemplateLiteral(["\n  0% {\n    background: #e1e8ed;\n  }\n  70% {\n    background: #cdd4d8;\n  }\n  100% {\n    background: #e1e8ed;\n  }\n"]);

  _templateObject$3 = function _templateObject() {
    return data;
  };

  return data;
}

var emptyStatePulse = keyframes(_templateObject$3());
var emptyStateImagePulse = keyframes(_templateObject2$2());
var emptyStateAnimation = css(_templateObject3$1(), emptyStatePulse);
var emptyStateImageAnimation = css(_templateObject4$1(), emptyStateImagePulse);

function _templateObject2$3() {
  var data = _taggedTemplateLiteral(["\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    background: #e1e8ed;\n    transition: opacity 0.3s ease-out;\n    opacity: ", ";\n    z-index: 1;\n  }\n"]);

  _templateObject2$3 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$4() {
  var data = _taggedTemplateLiteral(["\n  height: 1px;\n  width: 1px;\n  position: absolute;\n  z-index: -1;\n"]);

  _templateObject$4 = function _templateObject() {
    return data;
  };

  return data;
}

var ImageLoadCatcher = styled.img(_templateObject$4());
var loadingOverlay = css(_templateObject2$3(), function (_ref) {
  var loading = _ref.loading;
  return loading ? 1 : 0;
});

function _templateObject3$2() {
  var data = _taggedTemplateLiteral(["\n  background: transparent no-repeat center center / cover;\n  display: block;\n  flex: 0 0 125px;\n  overflow: hidden;\n  height: auto;\n  position: relative;\n  transition: flex-basis 0.25s ease-in-out;\n\n  &::before {\n    content: '';\n    padding-bottom: 100%;\n    display: block;\n  }\n\n  ", ";\n  ", ";\n"]);

  _templateObject3$2 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$4() {
  var data = _taggedTemplateLiteral(["\n  flex: 0 0 92px;\n"]);

  _templateObject2$4 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$5() {
  var data = _taggedTemplateLiteral(["\n  flex: 1;\n\n  &::before {\n    padding-bottom: 0;\n  }\n"]);

  _templateObject$5 = function _templateObject() {
    return data;
  };

  return data;
}

var largeStyle = css(_templateObject$5());
var mobileStyle = media.mobile(_templateObject2$4());
var MediaWrap = styled('div')(_templateObject3$2(), function (_ref) {
  var cardSize = _ref.cardSize;
  return isLarge(cardSize) ? largeStyle : mobileStyle;
}, loadingOverlay);

function _templateObject$6() {
  var data = _taggedTemplateLiteral(["\n  background-image: ", ";\n"]);

  _templateObject$6 = function _templateObject() {
    return data;
  };

  return data;
}

var Image = styled(MediaWrap)(_templateObject$6(), function (_ref) {
  var imageUrl = _ref.imageUrl;
  return imageUrl ? "url('".concat(imageProxy(imageUrl), "')") : '';
});
Image.defaultProps = {
  className: 'microlink_card__media microlink_card__media_image'
};

function _templateObject5$1() {
  var data = _taggedTemplateLiteral(["\n  height: 10px;\n  width: 30%;\n  display: block;\n  background: #e1e8ed;\n  opacity: 0.8;\n  ", " animation-delay: .25s;\n"]);

  _templateObject5$1 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$2() {
  var data = _taggedTemplateLiteral(["\n    height: 14px;\n  "]);

  _templateObject4$2 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$3() {
  var data = _taggedTemplateLiteral(["\n  width: 95%;\n  display: block;\n  background: #e1e8ed;\n  margin-bottom: 12px;\n  opacity: 0.8;\n  position: relative;\n  ", " animation-delay: .125s;\n\n  height: 33px;\n\n  &::before {\n    content: '';\n    position: absolute;\n    left: -1px;\n    right: -1px;\n    height: 6px;\n    background: #fff;\n  }\n\n  &::before {\n    top: 14px;\n  }\n\n  &::after {\n    bottom: 14px;\n  }\n\n  ", ";\n"]);

  _templateObject3$3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$5() {
  var data = _taggedTemplateLiteral(["\n  height: 16px;\n  width: 60%;\n  display: block;\n  background: #e1e8ed;\n  margin: 2px 0 8px;\n  opacity: 0.8;\n  ", ";\n"]);

  _templateObject2$5 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$7() {
  var data = _taggedTemplateLiteral(["\n  ", ";\n"]);

  _templateObject$7 = function _templateObject() {
    return data;
  };

  return data;
}

var MediaEmpty = styled(Image)(_templateObject$7(), emptyStateImageAnimation);
var HeaderEmpty = styled('header')(_templateObject2$5(), emptyStateAnimation);
var DescriptionEmpty = styled('span')(_templateObject3$3(), emptyStateAnimation, function (_ref) {
  var cardSize = _ref.cardSize;
  return cardSize !== 'large' && media.mobile(_templateObject4$2());
});
var FooterEmpty = styled('footer')(_templateObject5$1(), emptyStateAnimation);

var _ref3 =
/*#__PURE__*/
_jsx(HeaderEmpty, {});

var _ref4 =
/*#__PURE__*/
_jsx(FooterEmpty, {});

var CardEmptyState = function CardEmptyState(_ref2) {
  var cardSize = _ref2.cardSize;
  return _jsx(Fragment, {}, void 0, _jsx(MediaEmpty, {
    cardSize: cardSize
  }), _jsx(Content, {
    cardSize: cardSize,
    className: "microlink_card__content"
  }, void 0, _ref3, _jsx(DescriptionEmpty, {
    cardSize: cardSize
  }), _ref4));
};

function _templateObject2$6() {
  var data = _taggedTemplateLiteral(["\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background: #e1e8ed;\n  height: ", "px;\n  transition: opacity 0.3s ease-in-out;\n\n  .microlink_card:not(:hover) & {\n    opacity: 0 !important;\n  }\n"]);

  _templateObject2$6 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$8() {
  var data = _taggedTemplateLiteral(["\n  position: absolute;\n  background: #fff;\n  transform: rotate(30deg) skewX(-30deg) scale(1, 0.866);\n  top: calc(50% - 11px);\n  left: calc(50% - 11px);\n  z-index: 2;\n  opacity: ", ";\n  transition: opacity 0.15s ease-in-out;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    background: inherit;\n    left: 0;\n    top: 0;\n  }\n\n  &,\n  &::before,\n  &::after {\n    width: ", "px;\n    height: ", "px;\n    border-top-right-radius: 30%;\n    backface-visibility: hidden;\n  }\n\n  &::before {\n    transform: rotate(-135deg) skewX(-45deg) scale(1.414, 0.707)\n      translate(0, -50%);\n  }\n  &::after {\n    transform: rotate(135deg) skewY(-45deg) scale(0.707, 1.414) translate(50%);\n  }\n"]);

  _templateObject$8 = function _templateObject() {
    return data;
  };

  return data;
}

var PLAY_BUTTON_SIZE = 22;
var PROGRESS_BAR_HEIGHT = 2;

var getSize = function getSize(base, size) {
  return base * (size === 'normal' ? 1 : 1.75);
};

var PlayButton = styled('div')(_templateObject$8(), function (_ref) {
  var visible = _ref.visible;
  return visible ? 1 : 0;
}, function (_ref2) {
  var cardSize = _ref2.cardSize;
  return getSize(PLAY_BUTTON_SIZE, cardSize);
}, function (_ref3) {
  var cardSize = _ref3.cardSize;
  return getSize(PLAY_BUTTON_SIZE, cardSize);
});
var ProgressBar = styled('div').attrs(function (_ref4) {
  var playing = _ref4.playing,
      progress = _ref4.progress;
  return {
    style: {
      width: "".concat(progress, "%") || 0,
      opacity: playing ? 0.8 : 0
    }
  };
})(_templateObject2$6(), function (_ref5) {
  var cardSize = _ref5.cardSize;
  return getSize(PROGRESS_BAR_HEIGHT, cardSize);
});

function _templateObject$9() {
  var data = _taggedTemplateLiteral(["\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  ", ";\n"]);

  _templateObject$9 = function _templateObject() {
    return data;
  };

  return data;
}

var Video = styled('video')(_templateObject$9(), function (_ref) {
  var autoPlay = _ref.autoPlay;
  return autoPlay && "\n    &::media-controls-start-playback-button {\n      display: none;\n      appearance: none;\n    }\n  ";
});

function CardVideo(props) {
  var hasControls = props.controls,
      autoPlay = props.autoPlay,
      cardSize = props.cardSize,
      controls = props.controls,
      imageUrl = props.imageUrl,
      videoUrl = props.videoUrl,
      loading = props.loading,
      loop = props.loop,
      muted = props.muted,
      playsInline = props.playsInline,
      restProps = _objectWithoutProperties(props, ["controls", "autoPlay", "cardSize", "controls", "imageUrl", "videoUrl", "loading", "loop", "muted", "playsInline"]);

  var _useState = useState(autoPlay),
      _useState2 = _slicedToArray(_useState, 2),
      playing = _useState2[0],
      setPlaying = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      progress = _useState4[0],
      setProgress = _useState4[1];

  var videoRef = useRef();

  var togglePlayback = function togglePlayback(event) {
    event.preventDefault();
    setPlaying(function (playing) {
      var nextValue = !playing;
      var action = nextValue ? 'play' : 'pause';
      videoRef.current[action]();
      return nextValue;
    });
  };

  var onTimeUpdate = function onTimeUpdate() {
    var progress = videoRef.currentTime / videoRef.duration * 100;
    setProgress(progress);
  };

  return React.createElement(MediaWrap, _extends({
    className: "microlink_card__media_video_wrapper",
    cardSize: cardSize,
    loading: loading,
    onClick: togglePlayback
  }, restProps), React.createElement(Video, _extends({
    className: "microlink_card__media microlink_card__media_video",
    src: videoUrl,
    poster: imageProxy(imageUrl),
    muted: muted,
    autoPlay: autoPlay,
    loop: loop,
    playsInline: playsInline,
    ref: videoRef
  }, controls ? {
    onTimeUpdate: onTimeUpdate
  } : {})), _jsx(PlayButton, {
    cardSize: cardSize,
    visible: controls && !playing
  }), controls && _jsx(ProgressBar, {
    cardSize: cardSize,
    progress: progress,
    playing: playing
  }));
}

var isUrl = function isUrl(url) {
  return getUrlPath(url) !== null;
};

var MEDIA_COMPONENT = {
  video: CardVideo,
  image: Image
};

function CardMedia(props) {
  var videoUrl = props.videoUrl,
      imageUrl = props.imageUrl,
      isVideo = props.isVideo;
  var mediaUrl = isVideo ? videoUrl : imageUrl;

  var _useState = useState(!isUrl(mediaUrl)),
      _useState2 = _slicedToArray(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var mediaType = isVideo ? 'video' : 'image';
  var MediaComponent = MEDIA_COMPONENT[mediaType];
  var key = "".concat(mediaType, "__").concat(mediaUrl);
  return _jsx(Fragment, {}, void 0, React.createElement(MediaComponent, _extends({}, props, {
    loading: loading,
    key: key
  })), loading && _jsx(ImageLoadCatcher, {
    src: mediaUrl,
    onLoad: function onLoad() {
      return setLoading(false);
    }
  }));
}

function _templateObject6$1() {
  var data = _taggedTemplateLiteral(["\n  max-width: 500px;\n  background-color: #fff;\n  border-width: 1px;\n  border-style: solid;\n  border-color: #e1e8ed;\n  overflow: hidden;\n  color: #181919;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  display: flex;\n  text-decoration: none;\n  opacity: 1;\n  position: relative;\n\n  transition-duration: 0.15s;\n  transition-timing-function: ease-in-out;\n\n  &:active,\n  &:hover {\n    outline: 0;\n  }\n"]);

  _templateObject6$1 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$2() {
  var data = _taggedTemplateLiteral(["\n  flex-direction: ", ";\n"]);

  _templateObject5$2 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$3() {
  var data = _taggedTemplateLiteral(["\n  transition-property: background, border-color;\n  &:hover {\n    background: #f5f8fa;\n    border-color: rgba(136, 153, 166, 0.5);\n  }\n"]);

  _templateObject4$3 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$4() {
  var data = _taggedTemplateLiteral(["\n    height: calc(", " * 7/9);\n  "]);

  _templateObject3$4 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$7() {
  var data = _taggedTemplateLiteral(["\n  flex-direction: column;\n  height: ", ";\n  transition-property: background, border-color, height;\n\n  ", ";\n"]);

  _templateObject2$7 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$a() {
  var data = _taggedTemplateLiteral(["\n  background-color: ", ";\n  border-color: ", ";\n  transition-property: filter;\n\n  &&& {\n    color: ", ";\n  }\n\n  &:hover {\n    filter: brightness(90%);\n  }\n"]);

  _templateObject$a = function _templateObject() {
    return data;
  };

  return data;
}

var HEIGHT = '382px';
var CACHE = {};

var contrastStyle = function contrastStyle(_ref) {
  var backgroundColor = _ref.backgroundColor,
      color = _ref.color;
  return css(_templateObject$a(), backgroundColor, color, color);
};

var largeStyle$1 = css(_templateObject2$7(), HEIGHT, media.mobile(_templateObject3$4(), HEIGHT));
var hoverStyle = css(_templateObject4$3());

var rtlStyle = function rtlStyle(_ref2) {
  var cardSize = _ref2.cardSize;
  return css(_templateObject5$2(), isLarge(cardSize) ? 'column-reverse' : 'row-reverse');
};

var baseStyle = css(_templateObject6$1());

var createEl = function createEl(_ref3) {
  var as = _ref3.as;
  return styled(as)(baseStyle, function (_ref4) {
    var loading = _ref4.loading,
        contrast = _ref4.contrast;
    return !loading && !contrast && hoverStyle;
  }, function (_ref5) {
    var cardSize = _ref5.cardSize;
    return isLarge(cardSize) && largeStyle$1;
  }, function (_ref6) {
    var direction = _ref6.direction;
    return direction === 'rtl' && rtlStyle;
  }, function (_ref7) {
    var backgroundColor = _ref7.backgroundColor,
        color = _ref7.color,
        contrast = _ref7.contrast;
    return contrast && color && backgroundColor && contrastStyle;
  }, function (_ref8) {
    var backgroundColor = _ref8.backgroundColor,
        color = _ref8.color,
        contrast = _ref8.contrast;
    return contrast && (!color || !backgroundColor) && hoverStyle;
  });
};

var CardWrap = function CardWrap(_ref9) {
  var rel = _ref9.rel,
      href = _ref9.href,
      target = _ref9.target,
      props = _objectWithoutProperties(_ref9, ["rel", "href", "target"]);

  var key = JSON.stringify(_objectSpread({}, props, {
    children: undefined
  }));
  return createElement(CACHE[key] || (CACHE[key] = createEl(props)), props.as === 'a' ? _objectSpread({
    href: href,
    rel: rel,
    target: target
  }, props) : props);
};

CardWrap.defaultProps = {
  as: 'a',
  rel: 'noopener noreferrer',
  target: '_blank'
};

var Card = function Card(_ref) {
  var url = _ref.url,
      size = _ref.size,
      title = _ref.title,
      description = _ref.description,
      props = _objectWithoutProperties(_ref, ["url", "size", "title", "description"]);

  return _jsx(Fragment, {}, void 0, React.createElement(CardMedia, _extends({
    key: "".concat(url, "__").concat(size),
    url: url,
    cardSize: size
  }, props)), _jsx(CardContent, {
    className: "microlink_card__content",
    title: title,
    description: description,
    url: url,
    cardSize: size
  }));
};

function Microlink(props) {
  var autoPlay = props.autoPlay,
      controls = props.controls,
      loop = props.loop,
      setData = props.setData,
      muted = props.muted,
      loadingProp = props.loading,
      playsInline = props.playsInline,
      className = props.className,
      size = props.size,
      restProps = _objectWithoutProperties(props, ["autoPlay", "controls", "loop", "setData", "muted", "loading", "playsInline", "className", "size"]);

  var isLoadingUndefined = loadingProp === undefined;

  var _useState = useState(isLoadingUndefined ? true : loadingProp),
      _useState2 = _slicedToArray(_useState, 2),
      loadingState = _useState2[0],
      setLoading = _useState2[1];

  var _useState3 = useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      state = _useState4[0],
      setState = _useState4[1];

  var apiUrl = createApiUrl(props);

  var fetchData = function fetchData() {
    var fetch = isFunction(setData) ? Promise.resolve({}) : fetchFromApiUrl(apiUrl, props);
    fetch.then(function (_ref2) {
      var data = _ref2.data;
      return mergeData(data);
    });
  };

  var mergeData = function mergeData(fetchData) {
    var payload = isFunction(setData) ? setData(fetchData) : _objectSpread({}, fetchData, setData);
    var title = payload.title,
        description = payload.description,
        url = payload.url,
        video = payload.video,
        image = payload.image,
        logo = payload.logo;
    var imageUrl;
    var videoUrl;
    var media = {};
    var isVideo = false;

    if (isNil(video)) {
      media = someProp(payload, [].concat(props.media)) || image || logo;
      imageUrl = getUrlPath(media);
    } else {
      media = image || logo;
      videoUrl = getUrlPath(video);
      imageUrl = getUrlPath(media);
      isVideo = true;
    }

    var _media = media,
        color = _media.color,
        backgroundColor = _media.background_color;
    setLoading(false);
    setState({
      url: url,
      color: color,
      title: title,
      description: description,
      imageUrl: imageUrl,
      videoUrl: videoUrl,
      isVideo: isVideo,
      backgroundColor: backgroundColor
    });
  };

  useEffect(fetchData, [props.url, setData]);
  var title = state.title,
      color = state.color,
      backgroundColor = state.backgroundColor,
      url = state.url,
      description = state.description,
      imageUrl = state.imageUrl,
      videoUrl = state.videoUrl,
      isVideo = state.isVideo;
  var isLoading = isLoadingUndefined ? loadingState : loadingProp;
  return React.createElement(CardWrap, _extends({
    className: className ? "microlink_card ".concat(className) : 'microlink_card',
    href: url,
    title: title,
    cardSize: size,
    color: color,
    backgroundColor: backgroundColor,
    loading: isLoading
  }, restProps), isLoading ? _jsx(CardEmptyState, {
    cardSize: size
  }) : _jsx(Card, {
    title: title,
    description: description,
    url: url,
    isVideo: isVideo,
    imageUrl: imageUrl,
    videoUrl: videoUrl,
    autoPlay: autoPlay,
    controls: controls,
    loop: loop,
    muted: muted,
    playsInline: playsInline,
    size: size
  }));
}

Microlink.defaultProps = _objectSpread({
  apiKey: undefined,
  autoPlay: true,
  controls: true,
  media: ['image', 'logo'],
  loop: true,
  muted: true,
  playsInline: true,
  direction: 'ltr',
  size: 'normal'
}, defaultApiParameters);
export default Microlink;
export { createApiUrl, fetchFromApiUrl, imageProxy };